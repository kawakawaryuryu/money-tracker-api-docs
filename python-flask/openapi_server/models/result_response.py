# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server import util


class ResultResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id=None, total_expense=None, expense_goal=None, balance=None):  # noqa: E501
        """ResultResponse - a model defined in OpenAPI

        :param id: The id of this ResultResponse.  # noqa: E501
        :type id: date
        :param total_expense: The total_expense of this ResultResponse.  # noqa: E501
        :type total_expense: int
        :param expense_goal: The expense_goal of this ResultResponse.  # noqa: E501
        :type expense_goal: int
        :param balance: The balance of this ResultResponse.  # noqa: E501
        :type balance: int
        """
        self.openapi_types = {
            'id': date,
            'total_expense': int,
            'expense_goal': int,
            'balance': int
        }

        self.attribute_map = {
            'id': 'id',
            'total_expense': 'totalExpense',
            'expense_goal': 'expenseGoal',
            'balance': 'balance'
        }

        self._id = id
        self._total_expense = total_expense
        self._expense_goal = expense_goal
        self._balance = balance

    @classmethod
    def from_dict(cls, dikt) -> 'ResultResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The ResultResponse of this ResultResponse.  # noqa: E501
        :rtype: ResultResponse
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this ResultResponse.

        該当月（yyyy-MM）  # noqa: E501

        :return: The id of this ResultResponse.
        :rtype: date
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ResultResponse.

        該当月（yyyy-MM）  # noqa: E501

        :param id: The id of this ResultResponse.
        :type id: date
        """

        self._id = id

    @property
    def total_expense(self):
        """Gets the total_expense of this ResultResponse.

        その月の支出合計  # noqa: E501

        :return: The total_expense of this ResultResponse.
        :rtype: int
        """
        return self._total_expense

    @total_expense.setter
    def total_expense(self, total_expense):
        """Sets the total_expense of this ResultResponse.

        その月の支出合計  # noqa: E501

        :param total_expense: The total_expense of this ResultResponse.
        :type total_expense: int
        """
        if total_expense is not None and total_expense < 0:  # noqa: E501
            raise ValueError("Invalid value for `total_expense`, must be a value greater than or equal to `0`")  # noqa: E501

        self._total_expense = total_expense

    @property
    def expense_goal(self):
        """Gets the expense_goal of this ResultResponse.

        その月の支出目標  # noqa: E501

        :return: The expense_goal of this ResultResponse.
        :rtype: int
        """
        return self._expense_goal

    @expense_goal.setter
    def expense_goal(self, expense_goal):
        """Sets the expense_goal of this ResultResponse.

        その月の支出目標  # noqa: E501

        :param expense_goal: The expense_goal of this ResultResponse.
        :type expense_goal: int
        """

        self._expense_goal = expense_goal

    @property
    def balance(self):
        """Gets the balance of this ResultResponse.

        その月の差額  # noqa: E501

        :return: The balance of this ResultResponse.
        :rtype: int
        """
        return self._balance

    @balance.setter
    def balance(self, balance):
        """Sets the balance of this ResultResponse.

        その月の差額  # noqa: E501

        :param balance: The balance of this ResultResponse.
        :type balance: int
        """

        self._balance = balance

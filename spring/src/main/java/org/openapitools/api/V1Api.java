/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (4.1.3).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.openapitools.api;

import org.openapitools.model.ExpenseRequest;
import org.openapitools.model.ExpenseResponse;
import org.openapitools.model.ExpensesResponse;
import java.time.LocalDate;
import org.openapitools.model.NotFound;
import org.openapitools.model.ResultResponse;
import io.swagger.annotations.*;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2019-11-20T01:05:59.783+09:00[Asia/Tokyo]")

@Validated
@Api(value = "v1", description = "the v1 API")
public interface V1Api {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    @ApiOperation(value = "adds a expense", nickname = "addExpense", notes = "支出を登録する", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "registered successfully"),
        @ApiResponse(code = 400, message = "invalid input") })
    @RequestMapping(value = "/v1/expenses",
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<Void> addExpense(@ApiParam(value = "expense object"  )  @Valid @RequestBody ExpenseRequest expenseRequest) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "gets a expense", nickname = "getExpense", notes = "支出詳細を取得する ", response = ExpenseResponse.class, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "get successfully", response = ExpenseResponse.class),
        @ApiResponse(code = 404, message = "not found expenseId", response = NotFound.class) })
    @RequestMapping(value = "/v1/expenses/{expenseId}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<ExpenseResponse> getExpense(@ApiParam(value = "",required=true) @PathVariable("expenseId") String expenseId) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"date\" : \"2019-10-22T00:00:00.000+0000\",  \"amount\" : 100,  \"id\" : \"d290f1ee-6c54-4b01-90e6-d701748f0851\",  \"content\" : \"おにぎり\"}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "gets expenses", nickname = "getExpenses", notes = "支出一覧を取得する", response = ExpensesResponse.class, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "get succesfully", response = ExpensesResponse.class) })
    @RequestMapping(value = "/v1/expenses",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<ExpensesResponse> getExpenses(@ApiParam(value = "開始日") @Valid @RequestParam(value = "beginDate", required = false) @org.springframework.format.annotation.DateTimeFormat(iso = org.springframework.format.annotation.DateTimeFormat.ISO.DATE) LocalDate beginDate,@ApiParam(value = "終了日") @Valid @RequestParam(value = "endDate", required = false) @org.springframework.format.annotation.DateTimeFormat(iso = org.springframework.format.annotation.DateTimeFormat.ISO.DATE) LocalDate endDate) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"expenses\" : [ {    \"date\" : \"2019-10-22T00:00:00.000+0000\",    \"amount\" : 100,    \"id\" : \"d290f1ee-6c54-4b01-90e6-d701748f0851\",    \"content\" : \"おにぎり\"  }, {    \"date\" : \"2019-10-22T00:00:00.000+0000\",    \"amount\" : 100,    \"id\" : \"d290f1ee-6c54-4b01-90e6-d701748f0851\",    \"content\" : \"おにぎり\"  } ]}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "gets Result", nickname = "getResult", notes = "その月の収支結果を取得する ", response = ResultResponse.class, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "get successfully", response = ResultResponse.class),
        @ApiResponse(code = 404, message = "not found resultId", response = NotFound.class) })
    @RequestMapping(value = "/v1/results/{resultId}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<ResultResponse> getResult(@ApiParam(value = "",required=true) @PathVariable("resultId") String resultId) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"expenseGoal\" : 5000,  \"balance\" : -5000,  \"id\" : \"2000-01-23\",  \"totalExpense\" : 10000}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
